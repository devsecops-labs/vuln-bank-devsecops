name: DevSecOps Pipeline - Oldschool 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # SAST ‚Äì SonarQube Scan
  sast:
    name: SAST (SonarQube)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=devsecops-labs_vuln-bank-devsecops
            -Dsonar.organization=devsecops-labs
            -Dsonar.sources=.
            -Dsonar.python.version=3.9

      - name: Verify SonarQube Results
        run: |
          mkdir -p security-results/sonarqube
          sudo apt-get update -y && sudo apt-get install -y jq

          echo "Fetching SonarQube issues..."
          curl -sf -u ${{ secrets.SONAR_TOKEN }}:\ \
          "${{ secrets.SONAR_HOST_URL }}/api/issues/search?projectKeys=devsecops-labs_vuln-bank-devsecops" \
          | jq . > security-results/sonarqube/issues.json || echo '{"issues": []}' > security-results/sonarqube/issues.json

          issue_count=$(jq '.issues | length' security-results/sonarqube/issues.json)
          echo "Total SonarQube issues: $issue_count"

          if [ "$issue_count" -gt 0 ]; then
            echo "Found $issue_count issues. Review required."
          else
            echo "No SonarQube issues found."
          fi

      - name: Upload SonarQube Results
        uses: actions/upload-artifact@v4
        with:
          name: sonar-results
          path: security-results/sonarqube/
          retention-days: 30

  # SCA ‚Äì Dependency Scanning
  sca:
    name: Dependency Scanning (Snyk)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Results Directory
        run: mkdir -p security-results/snyk

      - name: Run Snyk Scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=security-results/snyk/scan-results.json

      - name: Verify Snyk Results
        run: |
          if [ -s security-results/snyk/scan-results.json ]; then
            echo "Snyk scan completed successfully"
          else
            echo "No Snyk vulnerabilities found"
            echo '{"vulnerabilities": []}' > security-results/snyk/scan-results.json
          fi

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: security-results/snyk/scan-results.json
          retention-days: 30

  # Container Scanning
  container_scan:
    name: Container Scanning (Trivy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t vulnerable-bank:latest .

      - name: Create Results Directory
        run: mkdir -p security-results/trivy

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-bank:latest'
          format: 'json'
          output: 'security-results/trivy/scan-results.json'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0

      - name: Verify Trivy Results
        run: |
          if [ -s security-results/trivy/scan-results.json ]; then
            echo "Trivy scan completed successfully"
          else
            echo "No Trivy vulnerabilities found"
            echo '{"Results": []}' > security-results/trivy/scan-results.json
          fi

      - name: Upload Trivy Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: security-results/trivy/scan-results.json
          retention-days: 30

  # IaC Scanning
  iac_scan:
    name: IaC Scanning (Checkov)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Results Directory
        run: mkdir -p security-results/checkov

      - name: Run Checkov Scan
        uses: bridgecrewio/checkov-action@master
        continue-on-error: true
        with:
          directory: .
          framework: dockerfile,github_actions
          output_format: json
          output_file_path: security-results/checkov/results.json
          soft_fail: true

      - name: Verify Checkov Results
        run: |
          if [ -s security-results/checkov/results.json ]; then
            echo "Checkov scan completed successfully"
          else
            echo "No Checkov issues found"
            echo '{"results": {"failed_checks": []}}' > security-results/checkov/results.json
          fi

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: security-results/checkov/results.json
          retention-days: 30

  # Dynamic Analysis
  zap_scan:
    name: Dynamic Analysis (OWASP ZAP)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start and Verify Flask Application
        run: |
          chmod +x scripts/health_check.sh
          ./scripts/health_check.sh

      - name: Create Results Directory and Set Permissions
        run: |
          mkdir -p security-results/zap
          sudo chown -R 1000:1000 .
          sudo chmod -R 777 security-results/zap

      - name: Run ZAP Scan
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable

          # Create zap.yaml with correct permissions
          sudo mkdir -p /home/runner/zap
          sudo chown -R 1000:1000 /home/runner/zap

          docker run --user 1000:1000 \
            --rm \
            -v $(pwd):/zap/wrk:rw \
            -v /home/runner/zap:/home/zap:rw \
            --network host \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://localhost:5000 \
            -J security-results/zap/zap-output.json \
            -I

      - name: Cleanup Docker Image
        if: always()
        run: docker rmi ghcr.io/zaproxy/zaproxy:stable

      - name: Upload ZAP Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: security-results/zap/
          retention-days: 90

  reporting:
    name: Generate and Upload HTML Report
    runs-on: ubuntu-latest
    steps:
      - name: Generate HTML Report
        run: |
          # Create a function to format JSON content
          format_json() {
            if [ -f "$1" ]; then
              cat "$1" | jq -r '.' || echo "Invalid JSON format"
            else
              echo "No results available"
            fi
          }

          mkdir -p security-results

          # Generate the report
          cat << EOF > security-results/report.html
          <!DOCTYPE html>
          <html>
          <head>
              <title>Security Scan Results</title>
              <style>
                  body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; background: #f5f5f5; }
                  .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
                  .tool-section { margin-bottom: 30px; padding: 20px; border: 1px solid #ddd; background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .tool-title { color: #333; border-bottom: 2px solid #667eea; padding-bottom: 10px; }
                  .vulnerability-item { margin: 10px 0; padding: 15px; background-color: #f9f9f9; border-radius: 5px; border-left: 4px solid #667eea; }
                  .severity-critical { color: #dc3545; font-weight: bold; }
                  .severity-high { color: #fd7e14; }
                  .severity-medium { color: #ffc107; }
                  .severity-low { color: #28a745; }
                  .modern-badge { background: #28a745; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üöÄ Security Scan Results</h1>
                  <p>Security tools for comprehensive vulnerability detection</p>
              </div>

              <div class="tool-section">
                  <h2 class="tool-title">üîç SonarQube Analysis <span class="modern-badge">SonarQube</span></h2>
                  <pre>$(cat security-results/sonarqube/issues.json 2>/dev/null || echo "No SonarQube results available")</pre>
              </div>

              <div class="tool-section">
                  <h2 class="tool-title">üì¶ Snyk SCA <span class="modern-badge">Snyk</span></h2>
                  <pre>$(cat security-results/snyk/scan-results.json 2>/dev/null || echo "No Snyk results available")</pre>
              </div>

              <div class="tool-section">
                  <h2 class="tool-title">üéØ ZAP Results <span class="modern-badge">OWASP ZAP</span></h2>
                  <pre>$(cat security-results/zap/zap-output.json 2>/dev/null || echo "No ZAP results available")</pre>
              </div>

              <div class="tool-section">
                  <h2 class="tool-title">üê≥ Trivy Results <span class="modern-badge">Trivy</span></h2>
                  <pre>$(cat security-results/trivy/scan-results.json 2>/dev/null || echo "No Trivy results available")</pre>
              </div>

              <div class="tool-section">
                  <h2 class="tool-title">üèóÔ∏è Checkov Results <span class="modern-badge">Checkov</span></h2>
                  <pre>$(cat security-results/checkov/results.json 2>/dev/null || echo "No Checkov results available")</pre>
              </div>
          </body>
          </html>
          EOF

      - name: Upload Reporting
        uses: actions/upload-artifact@v4
        with:
          name: security-reporting
          path: security-results/report.html
          retention-days: 90